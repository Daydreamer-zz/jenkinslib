#!groovy

//引用jenkins shareLibrary
@Library('jenkinslib') _
def tools = new org.devops.tools()

//取出当前job触发方式并打印
def job_causes = currentBuild.getBuildCauses().shortDescription[0].toString()
def job_msg = "Current build method is: " + job_causes
tools.PrintMes(job_msg, "green")

//初始化全局变量
String repoUrl = "http://xxxxxxxx.elinkint.com/xxxxxx/springboot-helloworld.git"
String branchName = "${env.branchName}"
String HARBOR_ADDRESS = "harbor.node1.com"
String HARBOR_PROJECT_NAME = "devops"
String IMAGE_NAME = "springboot-helloworld"
String IMAGE_TAG

if ( "${job_causes}" == "Generic Cause")  {
  branchName = ref.split("/")[2]
  currentBuild.description = "Trigger by user: ${user_username}, branch name: ${branchName}"
}


pipeline {
    agent {
        kubernetes {
            // label "build-pod"
            cloud "kubernetes"
            // workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: 'jenkins-agent-pvc', readOnly: false)
            yaml """
---
kind: Pod
apiVersion: v1
spec:
  dnsPolicy: ClusterFirstWithHostNet
  imagePullSecrets:
    - name: harbor
  containers:
    - name: jnlp
      image: jenkins/inbound-agent:4.10-3-jdk8
      imagePullPolicy: Always
      tty: true
      env:
        - name: LANGUAGE
          value: en_US:en
        - name: LC_ALL
          value: en_US.UTF-8
        - name: LANG
          value: en_US.UTF-8
      volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: false
    - name: maven
      image: maven:3.8-openjdk-8
      imagePullPolicy: Always
      tty: true
      command:
        - "cat"
      env:
        - name: MAVEN_CONFIG
          value: /var/maven/.m2
        - name: LC_ALL
          value: C.UTF-8
      volumeMounts:
        - name: m2cache
          mountPath: /var/maven/.m2
    - name: buildkit
      image: moby/buildkit:master
      imagePullPolicy: Always
      tty: true
      securityContext:
        privileged: true
      volumeMounts:
        - name: docker-config
          mountPath: /root/.docker
        - name: buildkitd-config
          mountPath: /etc/buildkit
  volumes:
    - name: localtime
      hostPath:
        path: /usr/share/zoneinfo/Asia/Shanghai
    - name: m2cache
      persistentVolumeClaim:
        claimName: m2cache
    - name: docker-config
      secret:
        secretName: docker-config
    - name: buildkitd-config
      configMap:
        name: buildkitd-config
            """
        }
    }

    triggers {
      GenericTrigger (
        causeString: 'Generic Cause',  
        genericVariables: [
          [defaultValue: '', key: 'ref', regexpFilter: '', value: '$.ref'], 
          [defaultValue: '', key: 'object_kind', regexpFilter: '', value: '$.object_kind'], 
          [defaultValue: '', key: 'before', regexpFilter: '', value: '$.before'], 
          [defaultValue: '', key: 'after', regexpFilter: '', value: '$.after'],
          [defaultValue: '', key: 'user_username', regexpFilter: '', value: '$.user_username']
        ],
        printContributedVariables: true,
        printPostContent: true,

        //过滤创建和删除分支
        regexpFilterExpression: '^push\\s(?!0{40}).{40}\\s(?!0{40}).{40}$',
        regexpFilterText: '$object_kind $before $after',

        silentResponse: true,
        token: 'wdnmd', 
        tokenCredentialId: ''
      )
    }

    options {
        timestamps()
    }
  
    parameters {

        listGitBranches(
            name: 'branchName', 
            branchFilter: 'refs/heads/(.*)',
            defaultValue: 'master',
            type: 'BRANCH',
            remoteURL: repoUrl,
            credentialsId: 'GITLAB_USER',
            sortMode: 'DESCENDING_SMART'
        )
	
	      choice(name: 'SonarQube', choices: ['False','True'],description: '')				 
    
    }
    
    stages {        
        stage("Get Code") {
          steps{
                  checkout(
                    [
                      $class: 'GitSCM', 
                      branches: [[name: "${branchName}"]], 
                      extensions: [], 
                      userRemoteConfigs: [[credentialsId: "GITLAB_USER", url: repoUrl]]
                    ]
                  )
                }
        }


        stage("Init config"){

          steps {
            script {
              def COMMIT_ID = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
              def now = new Date()
              def curDate = now.format("yyMMdd_HHmmss", TimeZone.getTimeZone('Asia/Shanghai'))
              IMAGE_TAG = COMMIT_ID + "-" + curDate
              println("The image tag is ${IMAGE_TAG}")
            }
          }
        }


        stage("Building") {
            steps{
                timeout(time:20, unit:"MINUTES") {
                    container(name: "maven") {
                        script {
                            tools.PrintMes("当前构建分支 ${branchName}", "green")
                            sh """
                            mvn clean package -Dmaven.test.skip=true -Duser.home=/var/maven
                            """
                        }
                    }
                }
            }
        }


        stage("Build image") {
            steps{
                container(name: "buildkit") {
                    script {
                      def IMAGE_ADDRESS = HARBOR_ADDRESS + "/" + HARBOR_PROJECT_NAME + "/" + IMAGE_NAME + ":" + IMAGE_TAG
                      println("full image adress is ${IMAGE_ADDRESS}")
                      sh """
                      buildctl build \
                      --frontend dockerfile.v0 \
                      --local context=. \
                      --local dockerfile=. \
                      --output type=image,registry.insecure=true,name=${IMAGE_ADDRESS},push=true
                      """
                    }
                }
            }
        }
    }
}
